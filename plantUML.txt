@startuml 智能客服系统类图

' 设置主题和样式
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classFontSize 14
skinparam classBackgroundColor #FEFECE
skinparam classBorderColor #A80036

' 模型层
package "model" {
  class User {
    - Long id
    - String username
    - String password
    - String role
    - String sessionId
    - LocalDateTime createdAt
    + User()
    + User(String username, String password)
    + String toString()
  }
  
  class Chat {
    - Long id
    - Long userId
    - String sessionId
    - String question
    - String answer
    - LocalDateTime createdAt
    - LocalDateTime updatedAt
  }
  
  class Document {
    - Long id
    - String filename
    - String filepath
    - LocalDateTime uploadTime
    - Long userId
    + Long getId()
    + void setId(Long id)
    + String getFilename()
    + void setFilename(String filename)
    + String getFilepath()
    + void setFilepath(String filepath)
    + LocalDateTime getUploadTime()
    + void setUploadTime(LocalDateTime uploadTime)
    + Long getUserId()
    + void setUserId(Long userId)
  }
  
  class Segment {
    - Long id
    - Long documentId
    - String content
    - byte[] vector
  }
}

' 仓库层
package "repository" {
  interface UserRepository {
    + User findByUsername(String username)
  }
  
  interface ChatRepository {
    + List<Chat> findByUserId(Long userId)
    + List<Chat> findByUserIdAndSessionId(Long userId, String sessionId)
    + List<String> findDistinctSessionIdByUserId(Long userId)
  }
  
  interface DocumentRepository {
    + List<Document> findByUserId(Long userId)
  }
  
  interface SegmentRepository {
    + List<Segment> findByDocumentId(Long documentId)
  }
}

' 服务层
package "service" {
  class UserService {
    - UserRepository userRepository
    - PasswordEncoder passwordEncoder
    - UserAuthService userAuthService
    + User createUser(User user)
    + Optional<User> login(String username, String password)
    + List<User> getAllUsers()
    + Optional<User> getUserById(Long id)
    + Optional<User> updateUser(Long id, User updated)
    + void deleteUser(Long id)
    + boolean changePassword(Long userId, String oldPassword, String newPassword)
    + User findByUsername(String username)
  }
  
  class UserAuthService {
    - UserRepository userRepository
    - PasswordEncoder passwordEncoder
    + User registerUser(User user)
    + Optional<User> login(String username, String password)
    + boolean changePassword(Long userId, String oldPassword, String newPassword)
  }
  
  class ChatService {
    - ChatRepository chatRepository
    - UserRepository userRepository
    - LLMService llmService
    - EmbeddingService embeddingService
    - IntentRecognitionService intentRecognitionService
    + Chat createChat(Chat chat)
    + List<Chat> getAllChats()
    + Optional<Chat> getChatById(Long id)
    + Optional<Chat> updateChat(Long id, Chat chat)
    + void deleteChat(Long id)
    + List<String> getSessionIdsByUserId(Long userId)
    + Map<String, List<Chat>> getUserChatHistoryBySession(Long userId)
    + List<Chat> getChatsByUserIdAndSessionId(Long userId, String sessionId)
    + Map<String, Object> processUserMessage(String message, String sessionId)
  }
  
  class KnowledgeService {
    - DocumentRepository documentRepository
    - Path uploadDir
    - SegmentRepository segmentRepo
    - EmbeddingService embeddingService
    - UserRepository userRepository
    + Document importFile(MultipartFile file, Long userId)
    + void processDocument(Long docId)
    + List<Document> getUserDocuments(Long userId)
    + List<Segment> searchRelevantSegments(String query, int limit)
  }
  
  class LLMService {
    - WebClient client
    - String model
    - String chatMode
    - String systemPrompt
    + String generateAnswer(String question, List<String> relevantSegments)
  }
  
  class EmbeddingService {
    - WebClient client
    - SegmentRepository segmentRepository
    + byte[] generateEmbedding(String text)
    + List<Segment> findSimilarSegments(String query, int limit)
  }
  
  class IntentRecognitionService {
    + enum Intent
    + Intent recognizeIntent(String userMessage)
  }
}

' 控制器层
package "controller" {
  class AuthController {
    - UserService userService
    - AuthenticationManager authenticationManager
    + ResponseEntity<?> register(@RequestBody User user)
    + ResponseEntity<?> login(@RequestBody Map<String, String> loginRequest)
    + ResponseEntity<?> checkAuth()
    + ResponseEntity<?> logout()
  }
  
  class ChatController {
    - ChatService chatService
    + ResponseEntity<Chat> createChat(@RequestBody Chat chat)
    + ResponseEntity<List<Chat>> getAllChats()
    + ResponseEntity<Chat> getChatById(@PathVariable Long id)
    + ResponseEntity<Chat> updateChat(@PathVariable Long id, @RequestBody Chat chat)
    + ResponseEntity<Void> deleteChat(@PathVariable Long id)
    + ResponseEntity<List<String>> getUserSessionIds(@PathVariable Long userId)
    + ResponseEntity<Map<String, List<Chat>>> getUserChatHistory(@PathVariable Long userId)
    + ResponseEntity<List<Chat>> getUserSessionChats(@PathVariable Long userId, @PathVariable String sessionId)
  }
  
  class ChatBotController {
    - ChatService chatService
    + ResponseEntity<?> chat(@RequestBody Map<String, String> request)
  }
  
  class KnowledgeController {
    - KnowledgeService knowledgeService
    + ResponseEntity<?> uploadFile(@RequestParam MultipartFile file)
    + ResponseEntity<?> processDocument(@PathVariable Long docId)
    + ResponseEntity<List<Document>> getUserDocuments()
  }
  
  class UserController {
    - UserService userService
    + ResponseEntity<List<User>> getAllUsers()
    + ResponseEntity<User> getUserById(@PathVariable Long id)
    + ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User user)
    + ResponseEntity<Void> deleteUser(@PathVariable Long id)
  }
}

' 工具类
package "util" {
  class DocumentParser {
    + {static} String parseToText(File file)
  }
  
  class TextUtils {
    + {static} List<String> chunkText(String text, int chunkSize)
  }
}

' 配置类
package "config" {
  class SecurityConfig {
  }
  
  class WebClientConfig {
  }
  
  class PromptProperties {
  }
}

' 关系定义
' 模型层关系
User "1" -- "*" Chat : 拥有 >
User "1" -- "*" Document : 上传 >
Document "1" -- "*" Segment : 包含 >

' 仓库层关系
UserRepository ..> User : 操作 >
ChatRepository ..> Chat : 操作 >
DocumentRepository ..> Document : 操作 >
SegmentRepository ..> Segment : 操作 >

' 服务层关系
UserService o-- UserRepository : 使用 >
UserService o-- UserAuthService : 使用 >
UserAuthService o-- UserRepository : 使用 >
ChatService o-- ChatRepository : 使用 >
ChatService o-- UserRepository : 使用 >
ChatService o-- LLMService : 使用 >
ChatService o-- EmbeddingService : 使用 >
ChatService o-- IntentRecognitionService : 使用 >
KnowledgeService o-- DocumentRepository : 使用 >
KnowledgeService o-- SegmentRepository : 使用 >
KnowledgeService o-- EmbeddingService : 使用 >
KnowledgeService o-- UserRepository : 使用 >
EmbeddingService o-- SegmentRepository : 使用 >

' 控制器层关系
AuthController o-- UserService : 使用 >
ChatController o-- ChatService : 使用 >
ChatBotController o-- ChatService : 使用 >
KnowledgeController o-- KnowledgeService : 使用 >
UserController o-- UserService : 使用 >

@enduml